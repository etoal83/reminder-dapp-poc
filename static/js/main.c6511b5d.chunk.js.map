{"version":3,"sources":["OrbitdbContext.tsx","NotificationPermissionContext.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["IPFS","require","IpfsContext","React","createContext","OrbitdbContext","OrbitdbConnection","children","useState","ipfs","setIpfs","orbitdb","setOrbitdb","initOrbitdb","a","create","EXPERIMENTAL","pubsub","console","log","OrbitDB","createInstance","useEffect","Provider","value","NotificationContext","permission","supported","NotificationPermission","window","Notification","setPermission","requestPermission","then","e","checkNotificationPromise","perm","handlePermission","MasterClock","Date","current","setCurrent","timeoutId","setTimeout","clearTimeout","formatDigits","digits","slice","className","style","textAlign","margin","getFullYear","getMonth","getDate","getDay","getHours","getMinutes","getSeconds","About","useContext","id","to","ReminderApp","store","setStore","reminders","setReminders","message","datetime","newReminder","setNewReminder","now","updatedAt","setUpdatedAt","queue","setQueue","tick","setTick","initStore","kvstore","load","handleNewReminderKeyDown","event","key","preventDefault","val","trim","uuid","uuidv4","put","setMinutes","destroyReminder","del","reminderItems","Object","entries","map","_","overdue","deadline","hours","minutes","seconds","textDecoration","onClick","records","all","getAllReminders","queuedKeys","yearEq","monthEq","dateEq","dayOfWeekEq","hoursEq","minutesEq","secondsEq","push","length","prev","concat","checkDueReminder","arg","reminder","get","body","triggerNotification","placeholder","onChange","target","onKeyDown","width","padding","fontSize","border","marginRight","marginLeft","marginTop","address","root","path","App","color","fontWeight","exact","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c6511b5d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport OrbitDB from 'orbit-db';\n\nconst IPFS = require('ipfs');\n\nexport const IpfsContext = React.createContext(null);\nexport const OrbitdbContext = React.createContext<OrbitDB | null>(null);\n\ninterface OrbitdbProps {\n  children?: React.ReactChild;\n}\n\nexport const OrbitdbConnection: React.FC<OrbitdbProps> = ({ children }) => {\n  const [ipfs, setIpfs] = useState(null);\n  const [orbitdb, setOrbitdb] = useState<OrbitDB | null>(null);\n\n  const initOrbitdb = async () => {\n    // --- Create an IPFS node ---\n    // This node works locally and is not connected to any peers so far.\n    const ipfs = await IPFS.create({\n      EXPERIMENTAL: {\n        pubsub: true,\n      },\n    });\n    setIpfs(ipfs);\n    console.log('IPFS ready');\n\n    // --- Create an OrbitDB instance ---\n    // It loads an OrbitDB object into memory, ready to create datastores.\n    const orbitdb = await OrbitDB.createInstance(ipfs);\n    setOrbitdb(orbitdb);\n    console.log('OrbitDB ready');\n  };\n\n  useEffect(() => {\n    initOrbitdb();\n  }, []);\n\n  return (\n    <IpfsContext.Provider value={ipfs}>\n      <OrbitdbContext.Provider value={orbitdb}>\n        {children}\n      </OrbitdbContext.Provider>\n    </IpfsContext.Provider>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nexport const NotificationContext = React.createContext({\n  permission: 'default',\n  supported: true,\n});\n\ninterface NotificationPermissionProps {\n  children?: React.ReactChild;\n}\n\nexport const NotificationPermission: React.FC<NotificationPermissionProps> = ({\n  children,\n}) => {\n  const [supported, _] = useState<boolean>('Notification' in window);\n  const [permission, setPermission] = useState<string>(Notification.permission);\n\n  const handlePermission = (perm: string) => {\n    setPermission(perm);\n  };\n\n  const checkNotificationPromise = () => {\n    try {\n      Notification.requestPermission().then();\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  };\n\n  useEffect(() => {\n    if (!supported) {\n      console.log('This browser does NOT support notifications.');\n      return;\n    }\n\n    if (checkNotificationPromise()) {\n      Notification.requestPermission().then((perm) => {\n        handlePermission(perm);\n      });\n    } else {\n    }\n  }, []);\n\n  return (\n    <NotificationContext.Provider\n      value={{ permission: permission, supported: supported }}\n    >\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n","import React, { useEffect, useState, useContext } from 'react';\nimport { HashRouter, Route, Switch, Link } from 'react-router-dom';\nimport OrbitDB from 'orbit-db';\nimport KeyValueStore from 'orbit-db-kvstore';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\nimport {\n  IpfsContext,\n  OrbitdbContext,\n  OrbitdbConnection,\n} from './OrbitdbContext';\nimport {\n  NotificationContext,\n  NotificationPermission,\n} from './NotificationPermissionContext';\n\ninterface Reminder {\n  message: string;\n  datetime: number | null;\n}\n\nconst isReminder = (arg: unknown): arg is Reminder => {\n  return (\n    typeof arg === 'object' &&\n    arg !== null &&\n    typeof (arg as Reminder).message === 'string'\n  );\n};\n\nconst MasterClock: React.FC<{}> = () => {\n  const [current, setCurrent] = useState(new Date());\n  const dayOfWeekStr: Array<string> = [\n    'Sun',\n    'Mon',\n    'Tue',\n    'Wed',\n    'Thu',\n    'Fri',\n    'Sat',\n  ];\n\n  useEffect(() => {\n    const timeoutId: number = window.setTimeout(\n      () => setCurrent(new Date()),\n      1000\n    );\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [current]);\n\n  const formatDigits = (digits: number) => ('0' + digits).slice(-2);\n\n  return (\n    <div\n      className=\"master-clock\"\n      style={{ textAlign: 'center', margin: '1em 0 2em' }}\n    >\n      {current.getFullYear()} / {formatDigits(current.getMonth() + 1)} /{' '}\n      {formatDigits(current.getDate())} ({dayOfWeekStr[current.getDay()]}){' '}\n      {formatDigits(current.getHours())}:{formatDigits(current.getMinutes())}:\n      {formatDigits(current.getSeconds())}\n    </div>\n  );\n};\n\nconst About: React.FC<{}> = () => {\n  const ipfs = useContext(IpfsContext);\n  const orbitdb = useContext<OrbitDB | null>(OrbitdbContext);\n\n  return (\n    <div className=\"system-info\">\n      <h2>IPFS and OrbitDB Status</h2>\n      <p>{ipfs === null ? `IPFS not connected` : `IPFS Connected`}</p>\n      <p>\n        {orbitdb === null\n          ? `OrbitDB not instantiated`\n          : `OrbitDB CID: ${orbitdb?.id}`}\n      </p>\n      <Link to=\"/\">Back to app</Link>\n    </div>\n  );\n};\n\nconst ReminderApp: React.FC<{}> = () => {\n  const orbitdb = useContext<OrbitDB | null>(OrbitdbContext);\n  const { permission } = useContext(NotificationContext);\n  const [store, setStore] =\n    useState<KeyValueStore<object | unknown> | null>(null);\n  const [reminders, setReminders] = useState<object>({});\n  const [newReminder, setNewReminder] = useState({\n    message: '',\n    datetime: null,\n  });\n  const [updatedAt, setUpdatedAt] = useState(Date.now());\n  const [queue, setQueue] = useState<Array<any>>([]);\n  const [tick, setTick] = useState(Date.now());\n\n  const initStore = async () => {\n    if (orbitdb === null) return;\n    if (store !== null) return;\n\n    const kvstore = await orbitdb.kvstore('reminders');\n    await kvstore.load();\n    setStore(kvstore);\n    setUpdatedAt(Date.now());\n  };\n\n  const getAllReminders = () => {\n    if (store === null) return;\n\n    const records = store.all;\n    setReminders(records);\n  };\n\n  const handleNewReminderKeyDown = async (event: React.KeyboardEvent) => {\n    if (store === null) return;\n    if (event.key !== 'Enter') return;\n\n    event.preventDefault();\n\n    const val = newReminder.message.trim();\n\n    if (val) {\n      const uuid = uuidv4();\n      const now = new Date();\n      await store.put(uuid, {\n        message: val,\n        datetime: now.setMinutes(now.getMinutes() + 3),\n      });\n      setNewReminder({ message: '', datetime: null });\n      setUpdatedAt(Date.now());\n    }\n  };\n\n  const handleNewReminderChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setNewReminder({ ...newReminder, message: event.target.value });\n  };\n\n  const destroyReminder = async (key: string) => {\n    if (store === null) return;\n\n    await store.del(key);\n    setUpdatedAt(Date.now());\n  };\n\n  const checkDueReminder = () => {\n    const queuedKeys: Array<any> = [];\n\n    Object.entries(reminders).map((key, _) => {\n      const deadline = new Date(key[1].datetime);\n      const now = new Date();\n\n      const yearEq = deadline.getFullYear() === now.getFullYear();\n      const monthEq = deadline.getMonth() === now.getMonth();\n      const dateEq = deadline.getDate() === now.getDate();\n      const dayOfWeekEq = deadline.getDay() === now.getDay();\n      const hoursEq = deadline.getHours() === now.getHours();\n      const minutesEq = deadline.getMinutes() === now.getMinutes();\n      const secondsEq = deadline.getSeconds() === now.getSeconds();\n\n      if (\n        yearEq &&\n        monthEq &&\n        dateEq &&\n        dayOfWeekEq &&\n        hoursEq &&\n        minutesEq &&\n        secondsEq\n      ) {\n        queuedKeys.push(key[0]);\n      }\n\n      return null;\n    });\n\n    if (queuedKeys.length) {\n      console.log(`keys: ${queuedKeys}`);\n      setQueue((prev) => prev.concat(queuedKeys));\n    }\n  };\n\n  const triggerNotification = () => {\n    if (store === null) return;\n\n    if (queue.length) {\n      const uuid = queue[0];\n      const reminder = store.get(uuid);\n\n      if (!isReminder(reminder)) {\n        console.log(\n          `The reminder ${uuid} does NOT exist so the notification is skipped.`\n        );\n        setQueue((prev) => prev.slice(1));\n        return;\n      }\n\n      const message = reminder.message;\n      new Notification('dReminder', { body: message });\n      setUpdatedAt(Date.now());\n      setQueue((prev) => prev.slice(1));\n    }\n  };\n\n  const formatDigits = (digits: number) => ('0' + digits).slice(-2);\n\n  const reminderItems = Object.entries(reminders).map((key, _) => {\n    const uuid = key[0];\n    const message = key[1].message;\n    const overdue = key[1].datetime < Date.now();\n    const deadline = new Date(key[1].datetime);\n    const hours = deadline.getHours();\n    const minutes = deadline.getMinutes();\n    const seconds = deadline.getSeconds();\n\n    return (\n      <li\n        key={uuid}\n        style={{\n          textDecoration: overdue ? 'line-through' : 'none',\n        }}\n      >\n        {formatDigits(hours)}:{formatDigits(minutes)}:{formatDigits(seconds)} /{' '}\n        {message} <button onClick={() => destroyReminder(uuid)}>Delete</button>\n      </li>\n    );\n  });\n\n  const testNotification = () => {\n    new Notification('dReminder', { body: 'Notification test' });\n  };\n\n  useEffect(() => {\n    initStore();\n  }, [orbitdb]);\n\n  useEffect(() => {\n    getAllReminders();\n  }, [updatedAt]);\n\n  useEffect(() => {\n    const timeoutId: number = window.setTimeout(() => {\n      checkDueReminder();\n      setTick(Date.now());\n    }, 1000);\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [tick]);\n\n  useEffect(() => {\n    triggerNotification();\n  }, [queue]);\n\n  return (\n    <div>\n      <div style={{ textAlign: 'center' }}>\n        <input\n          className=\"new-reminder\"\n          value={newReminder.message}\n          placeholder=\"Enter message\"\n          onChange={handleNewReminderChange}\n          onKeyDown={handleNewReminderKeyDown}\n          style={{\n            width: '80%',\n            padding: '12px 24px',\n            fontSize: '1.6em',\n            border: 'none',\n            marginRight: 'auto',\n            marginLeft: 'auto',\n          }}\n        />\n      </div>\n      <ul>{reminderItems}</ul>\n      <h2 style={{ marginTop: '2em' }}>Dev info</h2>\n      <dl>\n        <dt>Datastore multihash</dt>\n        <dd>\n          {store?.address.root} / {store?.address.path}\n        </dd>\n        <dt>Notification permission</dt>\n        <dd>\n          {permission} <button onClick={testNotification}>test</button>{' '}\n        </dd>\n      </dl>\n      <Link to=\"/about\">more</Link>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NotificationPermission>\n        <OrbitdbConnection>\n          <HashRouter>\n            <div\n              className=\"app-title\"\n              style={{\n                width: '100%',\n              }}\n            >\n              <h1\n                style={{\n                  color: '#61dafb',\n                  fontWeight: 100,\n                  fontSize: '5.5rem',\n                  padding: '0.33em 0 0',\n                  margin: 0,\n                  textAlign: 'center',\n                }}\n              >\n                dReminder\n              </h1>\n            </div>\n            <MasterClock />\n            <Switch>\n              <Route exact path=\"/\" component={ReminderApp} />\n              <Route path=\"/about\" component={About} />\n              <Route component={ReminderApp} />\n            </Switch>\n          </HashRouter>\n        </OrbitdbConnection>\n      </NotificationPermission>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}